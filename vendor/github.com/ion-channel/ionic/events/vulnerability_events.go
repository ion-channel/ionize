package events

import (
	"encoding/json"
	"fmt"
)

var validVulnerabilityEventActions = map[string]string{
	VulnerabilityAdded:   VulnerabilityAdded,
	VulnerabilityUpdated: VulnerabilityUpdated,
}

// VulnerabilityEventAction represents possible actions related to a vulnerability event
type VulnerabilityEventAction string

// UnmarshalJSON is a custom unmarshaller for enforcing a vulnerability event action is
// a valid value and returns an error if the value is invalid
func (a *VulnerabilityEventAction) UnmarshalJSON(b []byte) error {
	var aStr string
	err := json.Unmarshal(b, &aStr)
	if err != nil {
		return err
	}

	_, ok := validVulnerabilityEventActions[aStr]
	if !ok {
		return fmt.Errorf("invalid vulnerability event action")
	}

	*a = VulnerabilityEventAction(validVulnerabilityEventActions[aStr])
	return nil
}

// VulnerabilityEvent represents the vulnerability releated segement of an Event
// within Ion Channel
type VulnerabilityEvent struct {
	Action        VulnerabilityEventAction `json:"action"`
	URL           string                   `json:"url"`
	Vulnerability string                   `json:"vulnerability"`
}
