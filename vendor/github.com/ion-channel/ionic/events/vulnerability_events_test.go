package events

import (
	"encoding/json"
	"testing"

	. "github.com/franela/goblin"
	. "github.com/onsi/gomega"
)

func TestVulnderabilityEvents(t *testing.T) {
	g := Goblin(t)
	RegisterFailHandler(func(m string, _ ...int) { g.Fail(m) })

	g.Describe("Vulnerability Events", func() {
		g.It("should unmarshal a vulnerability event action", func() {
			var ve VulnerabilityEvent
			err := json.Unmarshal([]byte(SampleValidVulnerabilityEvent), &ve)

			Expect(err).To(BeNil())
			Expect(ve.Action).To(Equal(VulnerabilityEventAction("vulnerability_added")))
		})

		g.It("should return an error for an invalid action", func() {
			var ue VulnerabilityEvent
			err := json.Unmarshal([]byte(SampleInvalidVulnerabilityEvent), &ue)

			Expect(err).NotTo(BeNil())
			Expect(err.Error()).To(ContainSubstring("invalid vulnerability event action"))
		})
	})
}

const (
	SampleValidVulnerabilityEvent   = `{"vulnerability":"CVE-2017-4488", "action":"vulnerability_added"}`
	SampleInvalidVulnerabilityEvent = `{"vulnerability":"CVE-2017-4488", "action":"foo_action"}`
)
